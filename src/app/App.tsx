// src/App.tsx (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import { Route, Routes, useNavigate, useLocation } from "react-router-dom";
import { useEffect, useState } from "react";
import ReactGA from "react-ga4";
// SwipeRouter –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
import Layout from "../features/layout/layout.tsx";

const TRACKING_ID = "G-2J5SZSQH87";

// ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ —Å declare global –∏ —Ç.–¥. –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
declare global {
    interface Window {
        Telegram: {
            WebApp: {
                ready: () => void;
                expand: () => void;
                enableClosingConfirmation: () => void;
                setBackgroundColor: (color: string) => void;
                setHeaderColor: (color: 'bg_color' | 'secondary_bg_color' | string) => void;
                isHeaderVisible: boolean;
                initDataUnsafe?: {
                    start_param?: string;
                };
            };
        };
    }
    interface ScreenOrientation {
        lock(orientation: 'portrait-primary'): Promise<void>;
    }
}


function App() {
    // ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ —Å —Ö—É–∫–∞–º–∏ useState, useNavigate, useEffect –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    const [isMobile, setIsMobile] = useState<boolean | null>(null);
    const navigate = useNavigate();
    const location = useLocation();

    useEffect(() => { ReactGA.initialize(TRACKING_ID); }, []);
    useEffect(() => { ReactGA.send({ hitType: "pageview", page: location.pathname + location.search }); }, [location]);
    useEffect(() => { const checkIsMobile = () => /Mobi|Android|iPhone/i.test(navigator.userAgent); setIsMobile(checkIsMobile()); }, []);
    useEffect(() => {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();
            tg.enableClosingConfirmation();
            tg.setBackgroundColor('#f4f1e9');
            tg.setHeaderColor('secondary_bg_color');
            try { if (screen.orientation && typeof screen.orientation.lock === 'function') { screen.orientation.lock('portrait-primary'); } } catch (error) { console.error(error); }
            const startParam = tg.initDataUnsafe?.start_param;
            if (startParam) { if (startParam === 'generatePhoto') { navigate('/generatePhoto', { replace: true }); } else if (startParam === 'mapOfBatyrs') { navigate('/mapOfBatyrs', { replace: true }); } }
        }
    }, [navigate]);

    if (isMobile === null) return null;

    if (!isMobile) {
        return (
            <div style={{ height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', textAlign: 'center', padding: '1rem' }}>
                <div>
                    <h2>‚ö†Ô∏è “ö–æ–ª–¥–∞–Ω–±–∞ —Ç–µ–∫ –º–æ–±–∏–ª—å–¥—ñ “õ“±—Ä—ã–ª“ì—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω</h2>
                    <p>–°–∞–π—Ç—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω –∞—Ä“õ—ã–ª—ã –∞—à—ã“£—ã–∑ üì±</p>
                </div>
            </div>
        );
    }

    // ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
    // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –æ–¥–∏–Ω –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏—Ç Layout.
    // Layout —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è, –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å.
    return (
        <Routes>
            <Route path="/*" element={<Layout />} />
        </Routes>
    );
}

export default App;