import { Route, Routes, useNavigate, useLocation } from "react-router-dom";
import { useEffect, useState } from "react";
import ReactGA from "react-ga4";
import SwipeRouter from "../features/swiper/swiper.tsx";
import Layout from "../features/layout/layout.tsx";

const TRACKING_ID = "G-2J5SZSQH87";

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å WebApp –¥–ª—è TypeScript
declare global {
    interface Window {
        Telegram: {
            WebApp: {
                ready: () => void;
                expand: () => void;
                enableClosingConfirmation: () => void;
                setBackgroundColor: (color: string) => void;
                setHeaderColor: (color: string) => void;
                initDataUnsafe?: {
                    start_param?: string;
                };
            };
        };
    }
}

function App() {
    const [isMobile, setIsMobile] = useState<boolean | null>(null);
    const navigate = useNavigate();
    const location = useLocation();

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Analytics
    useEffect(() => {
        ReactGA.initialize(TRACKING_ID);
    }, []);

    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
    useEffect(() => {
        ReactGA.send({ hitType: "pageview", page: location.pathname + location.search });
    }, [location]);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    useEffect(() => {
        const checkIsMobile = () => /Mobi|Android|iPhone/i.test(navigator.userAgent);
        setIsMobile(checkIsMobile());
    }, []);

    // 4. –†–∞–±–æ—Ç–∞ —Å Telegram WebApp
    useEffect(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç Telegram.WebApp —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;

            // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
            tg.ready();

            // ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            tg.expand();
            console.log("üöÄ Telegram Web App expanded to full screen.");

            // ‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            tg.enableClosingConfirmation();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–µ–ª–æ –∫–∞–∫ —á–∞—Å—Ç—å Telegram
            tg.setBackgroundColor('#f4f1e9'); // –¶–≤–µ—Ç —Ñ–æ–Ω–∞, –∫–∞–∫ —É –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã
            tg.setHeaderColor('#3a2d21');    // –¢–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –¥–ª—è —à–∞–ø–∫–∏

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ deeplink-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (start_param)
            const startParam = tg.initDataUnsafe?.start_param;
            if (startParam) {
                console.log(`Deep link parameter detected: ${startParam}`);
                if (startParam === 'generatePhoto') {
                    navigate('/generatePhoto', { replace: true });
                } else if (startParam === 'mapOfBatyrs') {
                    navigate('/mapOfBatyrs', { replace: true });
                }
            }
        }
    }, [navigate]); // navigate –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏

    // –ü–æ–∫–∞ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º
    if (isMobile === null) {
        return null;
    }

    // –ï—Å–ª–∏ –Ω–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!isMobile) {
        return (
            <div style={{ height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', textAlign: 'center', padding: '1rem' }}>
                <div>
                    <h2>‚ö†Ô∏è “ö–æ–ª–¥–∞–Ω–±–∞ —Ç–µ–∫ –º–æ–±–∏–ª—å–¥—ñ “õ“±—Ä—ã–ª“ì—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω</h2>
                    <p>–°–∞–π—Ç—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω –∞—Ä“õ—ã–ª—ã –∞—à—ã“£—ã–∑ üì±</p>
                </div>
            </div>
        );
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    return (
        <Routes>
            <Route path="/" element={<Layout />}>
                <Route index element={<SwipeRouter />} />
                <Route path="generatePhoto" element={<SwipeRouter />} />
                <Route path="mapOfBatyrs" element={<SwipeRouter />} />
            </Route>
        </Routes>
    );
}

export default App;