// src/App.tsx

import { Route, Routes, useNavigate, useLocation } from "react-router-dom";
import { useEffect, useState } from "react";
import ReactGA from "react-ga4";
import SwipeRouter from "../features/swiper/swiper.tsx";
import Layout from "../features/layout/layout.tsx";

const TRACKING_ID = "G-2J5SZSQH87";

// –û–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å WebApp –¥–ª—è TypeScript
declare global {
    interface Window {
        Telegram: {
            WebApp: {
                ready: () => void;
                expand: () => void;
                enableClosingConfirmation: () => void;
                setBackgroundColor: (color: string) => void;
                setHeaderColor: (color: 'bg_color' | 'secondary_bg_color' | string) => void; // –£—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø
                isHeaderVisible: boolean;
                initDataUnsafe?: {
                    start_param?: string;
                };
            };
        };
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Screen Orientation API
    interface ScreenOrientation {
        lock(orientation: 'portrait-primary'): Promise<void>;
    }
}

function App() {
    const [isMobile, setIsMobile] = useState<boolean | null>(null);
    const navigate = useNavigate();
    const location = useLocation();

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Analytics
    useEffect(() => {
        ReactGA.initialize(TRACKING_ID);
    }, []);

    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
    useEffect(() => {
        ReactGA.send({ hitType: "pageview", page: location.pathname + location.search });
    }, [location]);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    useEffect(() => {
        const checkIsMobile = () => /Mobi|Android|iPhone/i.test(navigator.userAgent);
        setIsMobile(checkIsMobile());
    }, []);

    // 4. –†–∞–±–æ—Ç–∞ —Å Telegram WebApp
    useEffect(() => {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;

            tg.ready();
            tg.expand();
            tg.enableClosingConfirmation();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            tg.setBackgroundColor('#f4f1e9');

            // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –î–µ–ª–∞–µ–º —à–∞–ø–∫—É "–Ω–µ–≤–∏–¥–∏–º–æ–π"
            // –ú—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —à–∞–ø–∫–∏ –≤ 'secondary_bg_color'.
            // –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —à–∞–ø–∫—É –ø—Ä–∏–Ω—è—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞,
            // —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–∫—Ä—ã–≤–∞—è –µ–µ –∏ —Å–æ–∑–¥–∞–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.
            tg.setHeaderColor('secondary_bg_color');
            console.log("üé® Header color set to secondary_bg_color for fullscreen effect.");

            // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç —ç–∫—Ä–∞–Ω–∞
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Web API –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.
            try {
                if (screen.orientation && typeof screen.orientation.lock === 'function') {
                    screen.orientation.lock('portrait-primary')
                        .then(() => console.log("üîí Screen orientation locked to portrait."))
                        .catch(err => console.error("Could not lock orientation: ", err));
                }
            } catch (error) {
                console.error("Screen orientation lock API not supported or failed:", error);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ deeplink-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (start_param)
            const startParam = tg.initDataUnsafe?.start_param;
            if (startParam) {
                console.log(`Deep link parameter detected: ${startParam}`);
                if (startParam === 'generatePhoto') {
                    navigate('/generatePhoto', { replace: true });
                } else if (startParam === 'mapOfBatyrs') {
                    navigate('/mapOfBatyrs', { replace: true });
                }
            }
        }
    }, [navigate]);

    if (isMobile === null) {
        return null;
    }

    if (!isMobile) {
        return (
            <div style={{ height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', textAlign: 'center', padding: '1rem' }}>
                <div>
                    <h2>‚ö†Ô∏è “ö–æ–ª–¥–∞–Ω–±–∞ —Ç–µ–∫ –º–æ–±–∏–ª—å–¥—ñ “õ“±—Ä—ã–ª“ì—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω</h2>
                    <p>–°–∞–π—Ç—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω –∞—Ä“õ—ã–ª—ã –∞—à—ã“£—ã–∑ üì±</p>
                </div>
            </div>
        );
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    return (
        <Routes>
            <Route path="/" element={<Layout />}>
                <Route index element={<SwipeRouter />} />
                <Route path="generatePhoto" element={<SwipeRouter />} />
                <Route path="mapOfBatyrs" element={<SwipeRouter />} />
            </Route>
        </Routes>
    );
}

export default App;