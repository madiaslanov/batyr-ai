
import { useState, useEffect, useCallback, useRef } from 'react';
import style from './MapOfBatyrs.module.css';
import { useMapSpeech } from "../../service/reactHooks/useMapSpeech.ts";

declare global {
    interface Window {
        handleMapClick?: (regionId: string) => void;
        simplemaps_countrymap?: {
            load: () => void;
        };
        simplemaps_countrymap_mapdata?: any;
    }
}

interface Batyr { name: string; years: string; description: string; image: string | null; }
interface HistoricalEvent { name: string; period: string; description: string; }
interface RegionData { region_name: string; main_text: string; batyrs: Batyr[]; historical_events: HistoricalEvent[]; }


const MapOfBatyrs = () => {
    const API_URL = 'https://api.batyrai.com';

    const [regionData, setRegionData] = useState<RegionData | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [isSpeaking, setIsSpeaking] = useState<boolean>(false);
    const textToReadRef = useRef<string>('');
    const audioRef = useRef<HTMLAudioElement | null>(null);
    const [isAudioLoading, setIsAudioLoading] = useState(false);

    const handleStopAudio = useCallback(() => {
        if (audioRef.current) {
            audioRef.current.pause();
            audioRef.current.currentTime = 0;

            audioRef.current = null;
        }
        setIsSpeaking(false);
    }, []);

    const handleRegionClick = useCallback(async (regionId: string) => {
        console.log(`‚úÖ –ö–ª–∏–∫ –∏–∑ mapdata.js! ‚ñ∂Ô∏è –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${regionId}`);
        handleStopAudio();
        setRegionData(null);
        setError(null);
        setLoading(true);
        try {
            const response = await fetch(`${API_URL}/api/region/${regionId}`);
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π: ${response.status}. ${errorText}`);
            }
            const data: RegionData = await response.json();
            setRegionData(data);
            const batyrsText = data.batyrs.map(b => `${b.name}. ${b.description}`).join(' ');
            const eventsText = data.historical_events.map(e => `${e.name}. ${e.description}`).join(' ');
            textToReadRef.current = `${data.region_name}. ${data.main_text} –û—Å—ã ”©“£—ñ—Ä–¥—ñ“£ –±–∞—Ç—ã—Ä–ª–∞—Ä—ã: ${batyrsText}. –¢–∞—Ä–∏—Ö–∏ –æ“õ–∏“ì–∞–ª–∞—Ä: ${eventsText}`;
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–µ:", err);
            setError("”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω –Ω–µ–º–µ—Å–µ —Å–µ—Ä–≤–µ—Ä–¥—ñ“£ –∂“±–º—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.");
        } finally {
            setLoading(false);
        }
    }, [API_URL, handleStopAudio]);


    useEffect(() => {
        window.handleMapClick = handleRegionClick;

        const loadScript = (src: string): Promise<void> => {
            return new Promise((resolve, reject) => {
                if (document.querySelector(`script[src="${src}"]`)) {
                    resolve();
                    return;
                }
                const script = document.createElement('script');
                script.src = src;
                script.async = true;
                script.onload = () => resolve();
                script.onerror = () => reject(new Error(`Failed to load script: ${src}`));
                document.head.appendChild(script);
            });
        };

        const initializeMap = async () => {
            try {
                await loadScript('/mapdata.js');
                await loadScript('/countrymap.js');

                if (window.simplemaps_countrymap?.load) {
                    window.simplemaps_countrymap.load();
                    console.log("üó∫Ô∏è –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
                } else {
                    console.warn("–§—É–Ω–∫—Ü–∏—è simplemaps_countrymap.load() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ö–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è.");
                }
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:", err);
                setError("–ö–∞—Ä—Ç–∞–Ω—ã –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.");
            }
        };

        if (!document.getElementById('simplemaps-css-script')) {
            const cssLink = document.createElement('link');
            cssLink.id = 'simplemaps-css-script';
            cssLink.rel = 'stylesheet';
            cssLink.href = '/map.css';
            document.head.appendChild(cssLink);
        }

        initializeMap();

        return () => {
            window.handleMapClick = undefined;
            handleStopAudio();
        };
    }, [handleRegionClick, handleStopAudio]);

    const handlePlayAudio = async () => {
        if (!textToReadRef.current || isAudioLoading) return;

        handleStopAudio();
        setIsAudioLoading(true);
        setIsSpeaking(false);
        setError(null);

        try {
            const response = await fetch(`${API_URL}/api/tts`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: textToReadRef.current }),
            });

            if (!response.ok) {
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.');
            }

            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            audioRef.current = audio;

            audio.onplay = () => setIsSpeaking(true);
            audio.onended = () => {
                setIsSpeaking(false);
                URL.revokeObjectURL(audioUrl);
            };
            audio.onerror = () => {
                setIsSpeaking(false);
                setError("–ê—É–¥–∏–æ—Ñ–∞–π–ª–¥—ã –æ–π–Ω–∞—Ç—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.");
                URL.revokeObjectURL(audioUrl);
            };
            audio.play();

        } catch (err) {
            setError("”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, –∞—É–¥–∏–æ–Ω—ã –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.");
        } finally {
            setIsAudioLoading(false);
        }
    };



    const [isAssistantVisible, setIsAssistantVisible] = useState(false);
    const assistantAudioRef = useRef<HTMLAudioElement | null>(null);

    const handleAssistantAnswer = useCallback((audioUrl: string) => {
        if (assistantAudioRef.current) {
            assistantAudioRef.current.pause();
        }
        const audio = new Audio(audioUrl);
        assistantAudioRef.current = audio;
        audio.play().catch(e => console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", e));
    }, []);

    const { isRecording, isProcessing, history, toggleRecording, clearHistory } = useMapSpeech({
        onNewAnswer: handleAssistantAnswer,
        onError: (message) => alert(`–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç “õ–∞—Ç–µ—Å—ñ: ${message}`),
        apiUrl: API_URL
    });

    const toggleAssistant = () => {
        const nextState = !isAssistantVisible;
        setIsAssistantVisible(nextState);
        if (!nextState) {
            if (isRecording) {
                toggleRecording();
            }
            if (assistantAudioRef.current) {
                assistantAudioRef.current.pause();
            }
        }
    };


    return (
        <div className={style.pageContainer}>
            <div className={style.header}>
                <h1>üåç –ë–∞—Ç—ã—Ä–ª–∞—Ä –ö–∞—Ä—Ç–∞—Å—ã</h1>
                <p>–ï–ª—ñ–º—ñ–∑–¥—ñ“£ —Ç–∞—Ä–∏—Ö—ã–Ω –±—ñ–ª! –ê–π–º–∞“õ—Ç—ã –±–∞—Å—ã–ø, –±–∞—Ç—ã—Ä–ª–∞—Ä –∂–∞–π–ª—ã –æ“õ—ã.</p>
            </div>

            <div id="map" className={`${style.mapContainer} swiper-no-swiping`}></div>


            <div className={style.infoPanel}>
                {loading && <div className={style.loader}>–ê“õ—Å–∞“õ–∞–ª–¥–∞—Ä–¥–∞–Ω —Å“±—Ä–∞–ø –∂–∞—Ç—ã—Ä–º—ã–∑...</div>}
                {error && <div className={style.error}>{error}</div>}
                {!loading && !error && !regionData && (
                    <div className={style.placeholder}>
                        –ê“õ–ø–∞—Ä–∞—Ç –∞–ª—É “Ø—à—ñ–Ω –∫–∞—Ä—Ç–∞–¥–∞“ì—ã –∫–µ–∑ –∫–µ–ª–≥–µ–Ω –∞–π–º–∞“õ—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑.
                    </div>
                )}
                {regionData && (
                    <div className={style.infoContent}>
                        <h2>{regionData.region_name}</h2>
                        <p className={style.mainText}>{regionData.main_text}</p>
                        <div className={style.buttons}>
                            {isAudioLoading ? (
                                <button className={style.button} disabled>‚è≥ –ñ“Ø–∫—Ç–µ–ª—É–¥–µ...</button>
                            ) : !isSpeaking ? (
                                <button onClick={handlePlayAudio} className={style.button}>üîä –û“õ—É</button>
                            ) : (
                                <button onClick={handleStopAudio} className={`${style.button} ${style.stopButton}`}>üîá
                                    –¢–æ“õ—Ç–∞—Ç—É</button>
                            )}
                        </div>
                        <h3>–û—Å—ã ”©“£—ñ—Ä–¥—ñ“£ –±–∞—Ç—ã—Ä–ª–∞—Ä—ã</h3>
                        <div className={style.listContainer}>
                            {regionData.batyrs.map((batyr, index) => (
                                <div key={`${batyr.name}-${index}`} className={style.batyrCard}>
                                    <img
                                        src={batyr.image || '/batyr-placeholder.png'}
                                        alt={`–ü–æ—Ä—Ç—Ä–µ—Ç ${batyr.name}`}
                                        className={style.batyrImage}
                                    />
                                    <div className={style.cardContent}>
                                        <strong>{batyr.name} ({batyr.years})</strong>
                                        <p>{batyr.description}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                        <h3>–ú–∞“£—ã–∑–¥—ã —Ç–∞—Ä–∏—Ö–∏ –æ“õ–∏“ì–∞–ª–∞—Ä</h3>
                        <div className={style.listContainer}>
                            {regionData.historical_events.map((event, index) => (
                                <div key={`${event.name}-${index}`} className={style.card}>
                                    <strong>{event.name} ({event.period})</strong>
                                    <p>{event.description}</p>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>


            {isAssistantVisible && (
                <div className={style.assistantOverlay} onClick={toggleAssistant}>
                    <div className={style.assistantModal} onClick={(e) => e.stopPropagation()}>
                        <div className={style.assistantHeader}>
                            <h3>AI-–ö”©–º–µ–∫—à—ñ –ë–∞—Ç—ã—Ä</h3>
                            <button onClick={toggleAssistant} className={style.closeButton}>√ó</button>
                        </div>
                        <div className={style.chatContainer}>
                            {history.length === 0 && !isProcessing && (
                                <div className={style.chatPlaceholder}>–¢–∞—Ä–∏—Ö —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“ì—ã“£—ã–∑–¥—ã “õ–æ–π—ã“£—ã–∑...</div>
                            )}
                            {history.map((msg, index) => (
                                <div key={index} className={msg.role === 'user' ? style.userMsg : style.assistantMsg}>
                                    {msg.content}
                                </div>
                            ))}
                            {isProcessing && <div className={style.assistantMsg}>–û–π–ª–∞–Ω—ã–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...</div>}
                        </div>
                        <div className={style.assistantFooter}>
                            <button
                                onClick={toggleRecording}
                                className={`${style.micButton} ${isRecording ? style.micRecording : ''}`}
                                disabled={isProcessing}
                            >
                                {isProcessing ? '‚è≥' : isRecording ? '‚ñ†' : '‚óè'}
                            </button>
                            <button onClick={clearHistory} className={style.clearButton}
                                    disabled={history.length === 0 || isProcessing}>–¢–∞–∑–∞–ª–∞—É
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default MapOfBatyrs;