import { useState, useEffect, useCallback, useRef } from 'react';
import style from './MapOfBatyrs.module.css';

// –û–±—ä—è–≤–ª—è–µ–º –Ω–∞—à—É –±—É–¥—É—â—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã TypeScript –µ–µ "–≤–∏–¥–µ–ª"
declare global {
    interface Window {
        handleMapClick?: (regionId: string) => void;
    }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö API
interface Batyr { name: string; years: string; description: string; image: string | null; }
interface HistoricalEvent { name: string; period: string; description: string; }
interface RegionData { region_name: string; main_text: string; batyrs: Batyr[]; historical_events: HistoricalEvent[]; }

const MapOfBatyrs = () => {
    const API_URL = 'https://api.batyrai.com';

    const [regionData, setRegionData] = useState<RegionData | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [isSpeaking, setIsSpeaking] = useState<boolean>(false);
    const textToReadRef = useRef<string>('');
    const mapInitialized = useRef(false);

    // ‚úÖ –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–£–î–ò–û
    const audioRef = useRef<HTMLAudioElement | null>(null); // –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à <audio> —ç–ª–µ–º–µ–Ω—Ç
    const [isAudioLoading, setIsAudioLoading] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const handleRegionClick = useCallback(async (regionId: string) => {
        console.log(`‚úÖ –ö–ª–∏–∫ –∏–∑ mapdata.js! ‚ñ∂Ô∏è –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${regionId}`);
        handleStopAudio(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∑–≤—É—á–∫—É –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        setRegionData(null);
        setError(null);
        setLoading(true);
        try {
            const response = await fetch(`${API_URL}/api/region/${regionId}`);
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π: ${response.status}. ${errorText}`);
            }
            const data: RegionData = await response.json();
            setRegionData(data);
            const batyrsText = data.batyrs.map(b => `${b.name}. ${b.description}`).join(' ');
            const eventsText = data.historical_events.map(e => `${e.name}. ${e.description}`).join(' ');
            textToReadRef.current = `${data.region_name}. ${data.main_text} –û—Å—ã ”©“£—ñ—Ä–¥—ñ“£ –±–∞—Ç—ã—Ä–ª–∞—Ä—ã: ${batyrsText}. –¢–∞—Ä–∏—Ö–∏ –æ“õ–∏“ì–∞–ª–∞—Ä: ${eventsText}`;
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–µ:", err);
            setError("”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω –Ω–µ–º–µ—Å–µ —Å–µ—Ä–≤–µ—Ä–¥—ñ“£ –∂“±–º—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.");
        } finally {
            setLoading(false);
        }
    }, []); // API_URL –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞, –µ–µ –º–æ–∂–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    // useEffect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    useEffect(() => {
        window.handleMapClick = handleRegionClick;

        if (mapInitialized.current) return;
        mapInitialized.current = true;

        const loadScript = (id: string, src: string, onLoad?: () => void) => {
            if (document.getElementById(id)) {
                if (onLoad) onLoad();
                return;
            }
            const script = document.createElement('script');
            script.id = id;
            script.src = src;
            if (onLoad) script.onload = onLoad;
            document.head.appendChild(script);
        };

        if (!document.getElementById('simplemaps-css-script')) {
            const cssLink = document.createElement('link');
            cssLink.id = 'simplemaps-css-script';
            cssLink.rel = 'stylesheet';
            cssLink.href = '/map.css';
            document.head.appendChild(cssLink);
        }

        loadScript('simplemaps-mapdata-script', '/mapdata.js', () => {
            console.log("‚úîÔ∏è –°–∫—Ä–∏–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ (mapdata.js) –∑–∞–≥—Ä—É–∂–µ–Ω.");
            loadScript('simplemaps-countrymap-script', '/countrymap.js', () => {
                console.log("‚úîÔ∏è –°–∫—Ä–∏–ø—Ç –∫–∞—Ä—Ç—ã (countrymap.js) –∑–∞–≥—Ä—É–∂–µ–Ω. –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.");
            });
        });

        return () => {
            window.handleMapClick = undefined;
        };
    }, [handleRegionClick]);

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ó–í–£–ß–ö–ò –ß–ï–†–ï–ó –ë–≠–ö–ï–ù–î
    const handlePlayAudio = async () => {
        if (!textToReadRef.current || isAudioLoading) return;

        handleStopAudio(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        setIsAudioLoading(true);
        setIsSpeaking(false);
        setError(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏

        try {
            const response = await fetch(`${API_URL}/api/tts`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: textToReadRef.current }),
            });

            if (!response.ok) {
                const errorDetails = await response.json();
                console.error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏:", errorDetails);
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.');
            }

            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);

            // –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            const audio = new Audio(audioUrl);
            audioRef.current = audio;

            audio.onplay = () => {
                console.log("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞—á–∞–ª–æ—Å—å");
                setIsSpeaking(true);
            }
            audio.onended = () => {
                console.log("‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
                setIsSpeaking(false);
            };
            audio.onerror = (e) => {
                console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:", e);
                setIsSpeaking(false);
                setError("–ê—É–¥–∏–æ—Ñ–∞–π–ª–¥—ã –æ–π–Ω–∞—Ç—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.");
            };

            audio.play();

        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ:", err);
            setError("”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, –∞—É–¥–∏–æ–Ω—ã –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.");
        } finally {
            setIsAudioLoading(false);
        }
    };

    const handleStopAudio = () => {
        if (audioRef.current) {
            audioRef.current.pause();
            audioRef.current.currentTime = 0;
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –º–æ–≥ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç
            URL.revokeObjectURL(audioRef.current.src);
            audioRef.current = null;
        }
        setIsSpeaking(false);
    };

    return (
        <div className={style.pageContainer}>
            <div className={style.header}>
                <h1>üåç –ë–∞—Ç—ã—Ä–ª–∞—Ä –ö–∞—Ä—Ç–∞—Å—ã</h1>
                <p>–ï–ª—ñ–º—ñ–∑–¥—ñ“£ —Ç–∞—Ä–∏—Ö—ã–Ω –±—ñ–ª! –ê–π–º–∞“õ—Ç—ã –±–∞—Å—ã–ø, –±–∞—Ç—ã—Ä–ª–∞—Ä –∂–∞–π–ª—ã –æ“õ—ã.</p>
            </div>
            <div id="map" className={style.mapContainer}></div>
            <div className={style.infoPanel}>
                {loading && <div className={style.loader}>–ê“õ—Å–∞“õ–∞–ª–¥–∞—Ä–¥–∞–Ω —Å“±—Ä–∞–ø –∂–∞—Ç—ã—Ä–º—ã–∑...</div>}
                {error && <div className={style.error}>{error}</div>}
                {!loading && !error && !regionData && (
                    <div className={style.placeholder}>
                        –ê“õ–ø–∞—Ä–∞—Ç –∞–ª—É “Ø—à—ñ–Ω –∫–∞—Ä—Ç–∞–¥–∞“ì—ã –∫–µ–∑ –∫–µ–ª–≥–µ–Ω –∞–π–º–∞“õ—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑.
                    </div>
                )}
                {regionData && (
                    <div className={style.infoContent}>
                        <h2>{regionData.region_name}</h2>
                        <p className={style.mainText}>{regionData.main_text}</p>
                        <div className={style.buttons}>
                            {/* ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ö–ù–û–ü–û–ö –° –°–û–°–¢–û–Ø–ù–ò–ï–ú –ó–ê–ì–†–£–ó–ö–ò */}
                            {isAudioLoading ? (
                                <button className={style.button} disabled>‚è≥ –ñ“Ø–∫—Ç–µ–ª—É–¥–µ...</button>
                            ) : !isSpeaking ? (
                                <button onClick={handlePlayAudio} className={style.button}>üîä –û“õ—É</button>
                            ) : (
                                <button onClick={handleStopAudio} className={`${style.button} ${style.stopButton}`}>üîá –¢–æ“õ—Ç–∞—Ç—É</button>
                            )}
                        </div>
                        <h3>–û—Å—ã ”©“£—ñ—Ä–¥—ñ“£ –±–∞—Ç—ã—Ä–ª–∞—Ä—ã</h3>
                        <div className={style.listContainer}>
                            {regionData.batyrs.map((batyr, index) => (
                                <div key={`${batyr.name}-${index}`} className={style.batyrCard}>
                                    <img
                                        src={batyr.image || '/batyr-placeholder.png'}
                                        alt={`–ü–æ—Ä—Ç—Ä–µ—Ç ${batyr.name}`}
                                        className={style.batyrImage}
                                    />
                                    <div className={style.cardContent}>
                                        <strong>{batyr.name} ({batyr.years})</strong>
                                        <p>{batyr.description}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                        <h3>–ú–∞“£—ã–∑–¥—ã —Ç–∞—Ä–∏—Ö–∏ –æ“õ–∏“ì–∞–ª–∞—Ä</h3>
                        <div className={style.listContainer}>
                            {regionData.historical_events.map((event, index) => (
                                <div key={`${event.name}-${index}`} className={style.card}>
                                    <strong>{event.name} ({event.period})</strong>
                                    <p>{event.description}</p>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default MapOfBatyrs;